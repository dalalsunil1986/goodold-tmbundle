<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>content</key>
	<string>/**
 * Implementation of hook_nodeapi().
 *
 * @param stdClass &amp;\$node The node the action is being performed on.
 * @param string \$op What kind of action is being performed.
 * @param bool|array \$a3 
 *	If \$op is "view" True is passed if the node is viewed as a node
 *	If \$op is "validate" the form that should be validated is passed as an array
 * @param bool \$page If \$op is "view" True is passed if the node is viewed as a page
 *
 * @return void|stdClass
 *	If \$op is "load" the function should return an array containing pairs of 
 *	fields =&gt; values to be merged into the node object.
 **/
function $1_nodeapi(&amp;\$node, \$op, \$a3=Null, \$page=Null) {
	switch (\$op) {
		// The \$node-&gt;content array has been rendered, so the node body or teaser is filtered and now contains HTML. 
		// This op should only be used when text substitution, filtering, or other raw text operations are necessary.
		case 'alter': 
		break;
		// The node is being deleted.
		case 'delete':
		break;
		// The revision of the node is deleted. You can delete data associated with that revision.
		case 'delete revision':
		break;
		// The node is being created (inserted in the database)
		case 'insert':
		break;
		// The node is about to be loaded from the database. This hook can be used to load additional data at this time.
		case 'load':
		break;
		// The node is about to be shown on the add/edit form. 
		case 'prepare':
		break;
		// The node is being cloned for translation. Load additional data or copy values from \$node-&gt;translation_source. 
		case 'prepare translation':
		break;
		// Prepare a node view for printing. Used for printer-friendly view in book_module 
		case 'print':
		break;
		// An RSS feed is generated. The module can return properties to be added to the RSS item generated for this node. 
		// See comment_nodeapi() and upload_nodeapi() for examples. The \$node passed can also be modified to add or remove 
		// contents to the feed item. 
		case 'rss item':
		break;
		// The node is displayed as a search result. If you want to display extra information with the result, return it. 
		case 'search result':
		break;
		// The node passed validation and is about to be saved. Modules may use this to make changes to the node before 
		// it is saved to the database. 
		case 'presave':
		break;
		// The node is being updated.
		case 'update':
		break;
		// The node is being indexed. If you want additional information to be indexed which is not already visible through 
		// nodeapi "view", then you should return it here. 
		case 'update index':
		break;
		// The user has just finished editing the node and is trying to preview or submit it. This hook can be used to check the 
		// node data. Errors should be set with form_set_error().
		case 'validate':
		break;
		// The node content is being assembled before rendering. The module may add elements \$node-&gt;content prior to rendering. 
		// This hook will be called after hook_view(). The format of \$node-&gt;content is the same as used by Forms API.
		case 'view':
		break;
	}
}</string>
	<key>name</key>
	<string>NodeApi hook</string>
	<key>scope</key>
	<string>source.php</string>
	<key>tabTrigger</key>
	<string>nodeapi</string>
	<key>uuid</key>
	<string>AEFC74C7-6C72-4C0B-82A1-A48A233FEA24</string>
</dict>
</plist>
